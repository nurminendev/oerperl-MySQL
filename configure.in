dnl Process this file with autoconf to produce a configure script.
AC_INIT(README)
AC_CONFIG_HEADER(config.h)

dnl This is the default destination
AC_PREFIX_DEFAULT($HOME/oer+MySQL)

dnl Checks for programs.
AC_PROG_CC
AC_PROG_MAKE_SET
AC_PROG_INSTALL

dnl we need uname
AC_CHECK_PROG(UNAME,uname,uname)

AC_ARG_ENABLE(debug,[  --enable-debug          switch debug on],debug=$enableval)
AC_ARG_ENABLE(opt,[  --enable-opt            switch optimization on],opt=$enableval)
AC_ARG_ENABLE(profile,[  --enable-profile        switch code profiling on],profile=$enableval)
AC_ARG_ENABLE(debianmysql,[  --enable-debianmysql    try to find MySQL from Debian locations],debianmysql=$enableval)
AC_ARG_ENABLE(static,[  --enable-static         use static libraries],static=$enableval)
AC_ARG_WITH(mysql,[  --with-mysql=DIR        MySQL installed in DIR [/usr/local/mysql]],mysql="$withval",mysql="/usr/local/mysql")
AC_ARG_WITH(mysqlinc,[  --with-mysqlinc=DIR     DIR of MySQL includes],mysqlinc="$withval")
AC_ARG_WITH(mysqllib,[  --with-mysqllib=DIR     DIR of MySQL libraries],mysqllib="$withval")
AC_ARG_WITH(mysqlbin,[  --with-mysqlbin=DIR     DIR of MySQL binaries],mysqlbin="$withval")

AC_SUBST(mysql)
AC_SUBST(mysqlinc)
AC_SUBST(mysqllib)
AC_SUBST(mysqlbin)

AC_MSG_CHECKING(system type)
SYSTEM_TYPE=`${UNAME}`
AC_MSG_RESULT($SYSTEM_TYPE)

AC_PATH_PROG(sedpath, sed)
if test "_$sedpath" = _; then
  AC_MSG_ERROR("Cannot find sed: I need it\!")
fi

STRIP=yes
if test x${SYSTEM_TYPE} = "xIRIX"; then
  STRIP=no
fi

dnl compile defaults
MYCFLAGSADDCC="-O"
MYCFLAGSADDGCC="-O2 -Wstrict-prototypes -Wall"
MYLDFLAGSADDCC="-s"
MYLDFLAGSADDGCC="-s"
if test "$opt" = "no"; then
    MYCFLAGSADDCC=""
    MYCFLAGSADDGCC="-Wstrict-prototypes -Wall"
fi
if test "$debug" = "yes"; then
    MYCFLAGSADDCC="-DOER_DEBUG -g"
    MYCFLAGSADDGCC="-DOER_DEBUG -Wstrict-prototypes -Wall -g"
    MYLDFLAGSADDCC=""
    MYLDFLAGSADDGCC=""
fi
if test "$profile" = "yes"; then
    MYCFLAGSADDCC="$-DOER_DEBUG -g -p"
    MYCFLAGSADDGCC="-DOER_DEBUG -Wstrict-prototypes -Wall -g -pg"
    MYLDFLAGSADDCC="-p"
    MYLDFLAGSADDGCC="-pg"
fi

dnl system specific compile settings
if test "x${SYSTEM_TYPE}" = "xHP-UX"; then
  MYCFLAGSADDCC="${MYCFLAGSADDCC} -Ae -D_NO_H_ERRNO"
  MYCFLAGSADDGCC="${MYCFLAGSADDGCC} -D_NO_H_ERRNO"
fi
if test "x${SYSTEM_TYPE}" = "xOSF1"; then
  MYCFLAGSADDCC="${MYCFLAGSADDCC} -std -no_intrinsics"
  MYCFLAGSADDGCC="${MYCFLAGSADDGCC}"
fi
dnl newer SunOS/Solaris have different signal() behaviour
if test "x${SYSTEM_TYPE}" = "xSunOS"; then
  MYCFLAGSADDCC="${MYCFLAGSADDCC} -DNEW_SIGNALS"
  MYCFLAGSADDGCC="${MYCFLAGSADDGCC} -DNEW_SIGNALS"
fi
IRIX=no
if test "x${SYSTEM_TYPE}" = "xIRIX"; then
  MYCFLAGSADDCC="${MYCFLAGSADDCC} -std -no_intrinsics"
  MYCFLAGSADDGCC="${MYCFLAGSADDGCC}"
  MYLDFLAGSADDCC=""
  MYLDFLAGSADDGCC=""
  IRIX=yes
fi

dnl assume gcc
MYCFLAGS="${MYCFLAGSADDGCC}"
MYLDFLAGS="${MYLDFLAGSADDGCC}"
if test "x$CC" != "xgcc"; then
  MYCFLAGS="${MYCFLAGSADDCC}"
  MYLDFLAGS="${MYLDFLAGSADDCC}"
fi

dnl Set compiler CFLAGS
CFLAGS=${MYCFLAGS}

if test "$static" = "yes"; then
  MYLDFLAGS="${MYLDFLAGS} -static"
fi

dnl Set linker LDFLAGS
LDFLAGS=${MYLDFLAGS}

dnl Find out source code size
LINES=`wc -l *.h *.c | tail -1 | sed 's/total/\ /' | tr -d ' '`
CHARS=`wc -c *.h *.c | tail -1 | sed 's/total/\ /' | tr -d ' '`

dnl export to config.h
AC_DEFINE_UNQUOTED(SOURCE_LINES,${LINES},[Number of source lines])

dnl export to config.h
AC_DEFINE_UNQUOTED(SOURCE_CHARS,${CHARS},[Number of characters in the source])

dnl Checks for libraries (except IRIX)
if test "${IRIX}" = "no"; then
  AC_CHECK_LIB(crypt,crypt)
  AC_CHECK_LIB(socket,socket)
  AC_CHECK_LIB(nsl,connect)
  AC_CHECK_LIB(dns,gethostbyname)
  AC_CHECK_LIB(dl,dlopen)
fi

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(fcntl.h sys/time.h unistd.h strings.h crypt.h)

dnl FreeBSD doesn't like ctype.h to be included, why only The Red Devil knows 
if test "x${SYSTEM_TYPE}" != "xFreeBSD"; then  
  AC_CHECK_HEADERS(ctype.h)
else
  echo "" 
  echo "  Disabling ctype.h because of FreeBSD, you can safely" 
  echo "  ignore the implicit declaration of function isxxxxx messages" 
  echo "" 
fi

dnl check for uname
AC_CHECK_FUNCS(uname)

dnl check for getaddrinfo
AC_CHECK_FUNCS(getaddrinfo)
if test "${ac_cv_func_getaddrinfo}" = "no"; then
  echo ""
  echo "  Your system does not support the getaddrinfo function call"
  echo "  (you could try oer+MySQL 1.0-41 or older)"
  echo ""
  exit
fi

dnl check for locale
AC_CHECK_HEADERS(locale.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_STRUCT_TM

dnl Checks for library functions.
AC_TYPE_SIGNAL
AC_CHECK_FUNCS(snprintf)
if test "${ac_cv_func_snprintf}" = "no"; then
  echo ""
  echo "  Your system does not have snprintf, using unsafe vsprintf alternative"
  echo ""
fi
AC_CHECK_FUNCS(vsnprintf)
if test "${ac_cv_func_vsnprintf}" = "no"; then
  echo ""
  echo "  Your system does not have vsnprintf, using unsafe vsprintf alternative"
  echo ""
  exit
fi
AC_CHECK_FUNCS(vsprintf)
if test "${ac_cv_func_vsprintf}" = "no"; then
  echo ""
  echo "  Your system does not have vsprintf. Get a real system!"
  echo ""
  exit
fi
AC_CHECK_FUNCS(vfprintf)
if test "${ac_cv_func_vfprintf}" = "no"; then
  echo ""
  echo "  Your system does not have vfprintf. Get a real system!"
  echo ""
  exit
fi

dnl check for Perl
AC_PATH_PROG(perlpath, perl)
AC_MSG_CHECKING(for perl >= 5.002)
PERL_VER=`$perlpath -e 'print $]>= 5.002?"yes":"no"'`
if test "$PERL_VER" = "yes"; then
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
  echo ""
  echo "  ERROR: Your Perl version is too old. This version of"
  echo "         oer+MySQL requires Perl 5.002 or newer."
  echo ""
  exit
fi
AC_MSG_CHECKING(for Perl compile flags)
PERL_CFLAGS=`$perlpath -MExtUtils::Embed -e ccopts 2>/dev/null`
if test "_$PERL_CFLAGS" = _ ; then
  echo ""
  echo "  ERROR: Couldn't get perl compile flags"
  echo "  ERROR: Make sure your have the ExtUtils::Embed"
  echo "         Perl module properly installed."
  echo ""
  exit
else
  PERL_LDFLAGS=`$perlpath -MExtUtils::Embed -e ldopts | $sedpath 's/-lgdbm\s*//'`
  PERL_LDFLAGS=`echo $PERL_LDFLAGS | $sedpath 's/-ldb\s*//'`
  PERL_LDFLAGS=`echo $PERL_LDFLAGS | $sedpath 's/-lndbm\s*//'`
  dnl oer already includes these next three
  PERL_LDFLAGS=`echo $PERL_LDFLAGS | $sedpath 's/-lnsl\s*//'`
  PERL_LDFLAGS=`echo $PERL_LDFLAGS | $sedpath 's/-ldl\s*//'`
  PERL_LDFLAGS=`echo $PERL_LDFLAGS | $sedpath 's/-lcrypt\s*//'`
  if test "x${SYSTEM_TYPE}" != "xLinux"; then
    PERL_LDFLAGS=`echo $PERL_LDFLAGS | $sedpath 's/-lposix //'`
  fi
  PERL_LDFLAGS=`echo $PERL_LDFLAGS | $sedpath 's/-lc\s*//'`
  AC_MSG_RESULT(ok)
fi
CFLAGS="${CFLAGS} ${PERL_CFLAGS}"
LIBS="${LIBS} ${PERL_LDFLAGS}"
OLDLIBS=$LIBS
AC_CHECK_LIB(perl,perl_construct, , AC_ERROR([Couldn't find libperl. Make sure you have the Perl development files installed.]))
LIBS=$OLDLIBS
dnl check for Debian MySQL
if test "$debianmysql" = "yes"; then
  mysql=""
  mysqlinc="/usr/include/mysql"
  mysqllib="/usr/lib"
  mysqlbin="/usr/bin"
  AC_SUBST(mysql)
  AC_SUBST(mysqlinc)
  AC_SUBST(mysqllib)
  AC_SUBST(mysqlbin)
fi
dnl check for MySQL
if test "$mysql" = "" -o "$mysql" = "yes"; then
  if test "$mysqlinc" = "" -o "$mysqlinc" = "yes"; then
    if test "$mysqllib" = "" -o "$mysqllib" = "yes"; then
      if test "$mysqllib" = "" -o "$mysqllib" = "yes"; then
        echo ""
        echo "  ERROR: You didn't tell me where MySQL is, use"
        echo "           --with-mysql=DIR"
        echo "         or"
        echo "           --with-mysqlinc=DIR"
        echo "           --with-mysqllib=DIR"
        echo "           --with-mysqlbin=DIR"
        echo "         or"
        echo "           --enable-debianmysql (for Debian users)"
        echo "         parameter(s) to configure"
        echo ""
        exit
      fi
    fi
  fi
fi
dnl extract $mysqlinc, $mysqllib and $mysqlbin from $mysql if not given
if test "$mysqlinc" = ""; then
  mysqlinc=$mysql/include/mysql
fi
if test "$mysqllib" = ""; then
  mysqllib=$mysql/lib/mysql
fi
if test "$mysqlbin" = ""; then
  mysqlbin=$mysql/bin
fi
if test ! -r "$mysqlinc/mysql.h"; then
  echo ""
  echo "  ERROR: Your system does not have mysql.h in $mysqlinc"
  echo "  ERROR: Maybe you should use"
  echo "           --with-mysql=DIR"
  echo "         or"
  echo "           --with-mysqlinc=DIR"
  echo "           --with-mysqllib=DIR"
  echo "           --with-mysqlbin=DIR"
  echo "         or"
  echo "           --enable-debianmysql (for Debian users)"
  echo "         parameter(s) to configure"
  echo ""
  exit
fi
CPPFLAGS="${CPPFLAGS} -I$mysqlinc"
if test "$static" = "yes"; then
  if test ! -r "$mysqllib/libmysqlclient.a"; then
    echo ""
    echo "  ERROR: Your system does not have libmysqlclient.a in $mysqllib"
    echo "  ERROR: Maybe you should use"
    echo "           --with-mysql=DIR"
    echo "         or"
    echo "           --with-mysqlinc=DIR"
    echo "           --with-mysqllib=DIR"
    echo "           --with-mysqlbin=DIR"
    echo "         parameter(s) to configure"
    echo ""
    exit
  fi
else
if test ! -r "$mysqllib/libmysqlclient.so"; then
    echo ""
    echo "  ERROR: Your system does not have libmysqlclient.so in $mysqllib"
    echo "  ERROR: Maybe you should use"
    echo "           --with-mysql=DIR"
    echo "         or"
    echo "           --with-mysqlinc=DIR"
    echo "           --with-mysqllib=DIR"
    echo "           --with-mysqlbin=DIR"
    echo "         parameter(s) to configure"
    echo ""
    exit
  fi
fi
LIBS="${LIBS} -L$mysqllib -lmysqlclient"
dnl -lz has to come after -lmysqlclient
dnl if doing a static link, we need libz
if test "$static" = "yes"; then
  AC_CHECK_LIB([z],[compress],[],[AC_MSG_ERROR("when linking static libz is required!")],[])
  LIBS="${LIBS} -lz"
fi
if test ! -x "$mysqlbin/mysql"; then
  echo ""
  echo "  ERROR: Your system does not have mysql in $mysqlbin"
  echo "  ERROR: Maybe you should use"
  echo "           --with-mysql=DIR"
  echo "         or"
  echo "           --with-mysqlinc=DIR"
  echo "           --with-mysqllib=DIR"
  echo "           --with-mysqlbin=DIR"
  echo "         or"
  echo "           --enable-debianmysql (for Debian users)"
  echo "         parameter(s) to configure"
  echo ""
  exit
fi
if test ! -x "$mysqlbin/mysqladmin"; then
  echo ""
  echo "  ERROR: Your system does not have mysqladmin in $mysqlbin"
  echo "  ERROR: Maybe you should use"
  echo "           --with-mysql=DIR"
  echo "         or"
  echo "           --with-mysqlinc=DIR"
  echo "           --with-mysqllib=DIR"
  echo "           --with-mysqlbin=DIR"
  echo "         or"
  echo "           --enable-debianmysql (for Debian users)"
  echo "         parameter(s) to configure"
  echo ""
  exit
fi
dnl export $mysqlinc and $mysqllib to Makefile
AC_SUBST(MYSQL_PATH_INC)
AC_SUBST(MYSQL_PATH_LIB)
AC_SUBST(MYSQL_PATH_BIN)
MYSQL_PATH_INC=${mysqlinc}
MYSQL_PATH_LIB=${mysqllib}
MYSQL_PATH_BIN=${mysqlbin}

AC_OUTPUT(Makefile)
AC_MSG_RESULT()
AC_MSG_RESULT("  Type \"make\" to compile oer+MySQL")
AC_MSG_RESULT()
